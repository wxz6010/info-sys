// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"com.alex.infosys/app/dal/model"
	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newOrgnizationType(db *gorm.DB) orgnizationType {
	_orgnizationType := orgnizationType{}

	_orgnizationType.orgnizationTypeDo.UseDB(db)
	_orgnizationType.orgnizationTypeDo.UseModel(&model.OrgnizationType{})

	tableName := _orgnizationType.orgnizationTypeDo.TableName()
	_orgnizationType.ALL = field.NewField(tableName, "*")
	_orgnizationType.ID = field.NewInt32(tableName, "id")
	_orgnizationType.TypeName = field.NewString(tableName, "type_name")
	_orgnizationType.CreatedAt = field.NewTime(tableName, "created_at")
	_orgnizationType.UpdatedAt = field.NewTime(tableName, "updated_at")

	_orgnizationType.fillFieldMap()

	return _orgnizationType
}

type orgnizationType struct {
	orgnizationTypeDo

	ALL       field.Field
	ID        field.Int32
	TypeName  field.String
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (o orgnizationType) Table(newTableName string) *orgnizationType {
	o.orgnizationTypeDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orgnizationType) As(alias string) *orgnizationType {
	o.orgnizationTypeDo.DO = *(o.orgnizationTypeDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orgnizationType) updateTableName(table string) *orgnizationType {
	o.ALL = field.NewField(table, "*")
	o.ID = field.NewInt32(table, "id")
	o.TypeName = field.NewString(table, "type_name")
	o.CreatedAt = field.NewTime(table, "created_at")
	o.UpdatedAt = field.NewTime(table, "updated_at")

	o.fillFieldMap()

	return o
}

func (o *orgnizationType) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orgnizationType) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 4)
	o.fieldMap["id"] = o.ID
	o.fieldMap["type_name"] = o.TypeName
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
}

func (o orgnizationType) clone(db *gorm.DB) orgnizationType {
	o.orgnizationTypeDo.ReplaceDB(db)
	return o
}

type orgnizationTypeDo struct{ gen.DO }

func (o orgnizationTypeDo) Debug() *orgnizationTypeDo {
	return o.withDO(o.DO.Debug())
}

func (o orgnizationTypeDo) WithContext(ctx context.Context) *orgnizationTypeDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orgnizationTypeDo) Clauses(conds ...clause.Expression) *orgnizationTypeDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orgnizationTypeDo) Returning(value interface{}, columns ...string) *orgnizationTypeDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orgnizationTypeDo) Not(conds ...gen.Condition) *orgnizationTypeDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orgnizationTypeDo) Or(conds ...gen.Condition) *orgnizationTypeDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orgnizationTypeDo) Select(conds ...field.Expr) *orgnizationTypeDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orgnizationTypeDo) Where(conds ...gen.Condition) *orgnizationTypeDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orgnizationTypeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *orgnizationTypeDo {
	return o.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (o orgnizationTypeDo) Order(conds ...field.Expr) *orgnizationTypeDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orgnizationTypeDo) Distinct(cols ...field.Expr) *orgnizationTypeDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orgnizationTypeDo) Omit(cols ...field.Expr) *orgnizationTypeDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orgnizationTypeDo) Join(table schema.Tabler, on ...field.Expr) *orgnizationTypeDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orgnizationTypeDo) LeftJoin(table schema.Tabler, on ...field.Expr) *orgnizationTypeDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orgnizationTypeDo) RightJoin(table schema.Tabler, on ...field.Expr) *orgnizationTypeDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orgnizationTypeDo) Group(cols ...field.Expr) *orgnizationTypeDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orgnizationTypeDo) Having(conds ...gen.Condition) *orgnizationTypeDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orgnizationTypeDo) Limit(limit int) *orgnizationTypeDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orgnizationTypeDo) Offset(offset int) *orgnizationTypeDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orgnizationTypeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *orgnizationTypeDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orgnizationTypeDo) Unscoped() *orgnizationTypeDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orgnizationTypeDo) Create(values ...*model.OrgnizationType) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orgnizationTypeDo) CreateInBatches(values []*model.OrgnizationType, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orgnizationTypeDo) Save(values ...*model.OrgnizationType) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orgnizationTypeDo) First() (*model.OrgnizationType, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrgnizationType), nil
	}
}

func (o orgnizationTypeDo) Take() (*model.OrgnizationType, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrgnizationType), nil
	}
}

func (o orgnizationTypeDo) Last() (*model.OrgnizationType, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrgnizationType), nil
	}
}

func (o orgnizationTypeDo) Find() ([]*model.OrgnizationType, error) {
	result, err := o.DO.Find()
	return result.([]*model.OrgnizationType), err
}

func (o orgnizationTypeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrgnizationType, err error) {
	buf := make([]*model.OrgnizationType, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orgnizationTypeDo) FindInBatches(result *[]*model.OrgnizationType, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orgnizationTypeDo) Attrs(attrs ...field.AssignExpr) *orgnizationTypeDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orgnizationTypeDo) Assign(attrs ...field.AssignExpr) *orgnizationTypeDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orgnizationTypeDo) Joins(field field.RelationField) *orgnizationTypeDo {
	return o.withDO(o.DO.Joins(field))
}

func (o orgnizationTypeDo) Preload(field field.RelationField) *orgnizationTypeDo {
	return o.withDO(o.DO.Preload(field))
}

func (o orgnizationTypeDo) FirstOrInit() (*model.OrgnizationType, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrgnizationType), nil
	}
}

func (o orgnizationTypeDo) FirstOrCreate() (*model.OrgnizationType, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrgnizationType), nil
	}
}

func (o orgnizationTypeDo) FindByPage(offset int, limit int) (result []*model.OrgnizationType, count int64, err error) {
	if limit <= 0 {
		count, err = o.Count()
		return
	}

	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orgnizationTypeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o *orgnizationTypeDo) withDO(do gen.Dao) *orgnizationTypeDo {
	o.DO = *do.(*gen.DO)
	return o
}

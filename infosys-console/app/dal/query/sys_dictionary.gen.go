// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"com.alex.infosys/app/dal/model"
	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newSysDictionary(db *gorm.DB) sysDictionary {
	_sysDictionary := sysDictionary{}

	_sysDictionary.sysDictionaryDo.UseDB(db)
	_sysDictionary.sysDictionaryDo.UseModel(&model.SysDictionary{})

	tableName := _sysDictionary.sysDictionaryDo.TableName()
	_sysDictionary.ALL = field.NewField(tableName, "*")
	_sysDictionary.ID = field.NewInt32(tableName, "id")
	_sysDictionary.Lable = field.NewString(tableName, "lable")
	_sysDictionary.Value = field.NewString(tableName, "value")
	_sysDictionary.Pid = field.NewInt32(tableName, "pid")
	_sysDictionary.Path = field.NewString(tableName, "path")
	_sysDictionary.CreatedAt = field.NewTime(tableName, "created_at")
	_sysDictionary.UpdatedAt = field.NewTime(tableName, "updated_at")

	_sysDictionary.fillFieldMap()

	return _sysDictionary
}

type sysDictionary struct {
	sysDictionaryDo

	ALL       field.Field
	ID        field.Int32
	Lable     field.String
	Value     field.String
	Pid       field.Int32
	Path      field.String
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (s sysDictionary) Table(newTableName string) *sysDictionary {
	s.sysDictionaryDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysDictionary) As(alias string) *sysDictionary {
	s.sysDictionaryDo.DO = *(s.sysDictionaryDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysDictionary) updateTableName(table string) *sysDictionary {
	s.ALL = field.NewField(table, "*")
	s.ID = field.NewInt32(table, "id")
	s.Lable = field.NewString(table, "lable")
	s.Value = field.NewString(table, "value")
	s.Pid = field.NewInt32(table, "pid")
	s.Path = field.NewString(table, "path")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *sysDictionary) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysDictionary) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id"] = s.ID
	s.fieldMap["lable"] = s.Lable
	s.fieldMap["value"] = s.Value
	s.fieldMap["pid"] = s.Pid
	s.fieldMap["path"] = s.Path
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s sysDictionary) clone(db *gorm.DB) sysDictionary {
	s.sysDictionaryDo.ReplaceDB(db)
	return s
}

type sysDictionaryDo struct{ gen.DO }

func (s sysDictionaryDo) Debug() *sysDictionaryDo {
	return s.withDO(s.DO.Debug())
}

func (s sysDictionaryDo) WithContext(ctx context.Context) *sysDictionaryDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysDictionaryDo) Clauses(conds ...clause.Expression) *sysDictionaryDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysDictionaryDo) Returning(value interface{}, columns ...string) *sysDictionaryDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysDictionaryDo) Not(conds ...gen.Condition) *sysDictionaryDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysDictionaryDo) Or(conds ...gen.Condition) *sysDictionaryDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysDictionaryDo) Select(conds ...field.Expr) *sysDictionaryDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysDictionaryDo) Where(conds ...gen.Condition) *sysDictionaryDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysDictionaryDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *sysDictionaryDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysDictionaryDo) Order(conds ...field.Expr) *sysDictionaryDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysDictionaryDo) Distinct(cols ...field.Expr) *sysDictionaryDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysDictionaryDo) Omit(cols ...field.Expr) *sysDictionaryDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysDictionaryDo) Join(table schema.Tabler, on ...field.Expr) *sysDictionaryDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysDictionaryDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sysDictionaryDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysDictionaryDo) RightJoin(table schema.Tabler, on ...field.Expr) *sysDictionaryDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysDictionaryDo) Group(cols ...field.Expr) *sysDictionaryDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysDictionaryDo) Having(conds ...gen.Condition) *sysDictionaryDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysDictionaryDo) Limit(limit int) *sysDictionaryDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysDictionaryDo) Offset(offset int) *sysDictionaryDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysDictionaryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sysDictionaryDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysDictionaryDo) Unscoped() *sysDictionaryDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysDictionaryDo) Create(values ...*model.SysDictionary) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysDictionaryDo) CreateInBatches(values []*model.SysDictionary, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysDictionaryDo) Save(values ...*model.SysDictionary) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysDictionaryDo) First() (*model.SysDictionary, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDictionary), nil
	}
}

func (s sysDictionaryDo) Take() (*model.SysDictionary, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDictionary), nil
	}
}

func (s sysDictionaryDo) Last() (*model.SysDictionary, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDictionary), nil
	}
}

func (s sysDictionaryDo) Find() ([]*model.SysDictionary, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysDictionary), err
}

func (s sysDictionaryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysDictionary, err error) {
	buf := make([]*model.SysDictionary, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysDictionaryDo) FindInBatches(result *[]*model.SysDictionary, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysDictionaryDo) Attrs(attrs ...field.AssignExpr) *sysDictionaryDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysDictionaryDo) Assign(attrs ...field.AssignExpr) *sysDictionaryDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysDictionaryDo) Joins(field field.RelationField) *sysDictionaryDo {
	return s.withDO(s.DO.Joins(field))
}

func (s sysDictionaryDo) Preload(field field.RelationField) *sysDictionaryDo {
	return s.withDO(s.DO.Preload(field))
}

func (s sysDictionaryDo) FirstOrInit() (*model.SysDictionary, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDictionary), nil
	}
}

func (s sysDictionaryDo) FirstOrCreate() (*model.SysDictionary, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDictionary), nil
	}
}

func (s sysDictionaryDo) FindByPage(offset int, limit int) (result []*model.SysDictionary, count int64, err error) {
	if limit <= 0 {
		count, err = s.Count()
		return
	}

	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysDictionaryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s *sysDictionaryDo) withDO(do gen.Dao) *sysDictionaryDo {
	s.DO = *do.(*gen.DO)
	return s
}

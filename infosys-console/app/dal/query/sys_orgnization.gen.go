// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"com.alex.infosys/app/dal/model"
	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newSysOrgnization(db *gorm.DB) sysOrgnization {
	_sysOrgnization := sysOrgnization{}

	_sysOrgnization.sysOrgnizationDo.UseDB(db)
	_sysOrgnization.sysOrgnizationDo.UseModel(&model.SysOrgnization{})

	tableName := _sysOrgnization.sysOrgnizationDo.TableName()
	_sysOrgnization.ALL = field.NewField(tableName, "*")
	_sysOrgnization.ID = field.NewInt32(tableName, "id")
	_sysOrgnization.Name = field.NewString(tableName, "name")
	_sysOrgnization.Pid = field.NewInt32(tableName, "pid")
	_sysOrgnization.CreatedAt = field.NewTime(tableName, "created_at")
	_sysOrgnization.UpdatedAt = field.NewTime(tableName, "updated_at")
	_sysOrgnization.DeletedAt = field.NewField(tableName, "deleted_at")
	_sysOrgnization.ContactName = field.NewString(tableName, "contact_name")
	_sysOrgnization.ContactPhone = field.NewString(tableName, "contact_phone")
	_sysOrgnization.ContactAddres = field.NewString(tableName, "contact_addres")
	_sysOrgnization.Ext1 = field.NewString(tableName, "ext1")
	_sysOrgnization.Ext2 = field.NewString(tableName, "ext2")
	_sysOrgnization.Ext3 = field.NewString(tableName, "ext3")
	_sysOrgnization.Ext4 = field.NewString(tableName, "ext4")
	_sysOrgnization.Ext5 = field.NewString(tableName, "ext5")
	_sysOrgnization.Ext6 = field.NewString(tableName, "ext6")
	_sysOrgnization.Ext7 = field.NewString(tableName, "ext7")
	_sysOrgnization.Ext8 = field.NewString(tableName, "ext8")
	_sysOrgnization.Ext9 = field.NewString(tableName, "ext9")
	_sysOrgnization.Ext10 = field.NewString(tableName, "ext10")
	_sysOrgnization.PName = field.NewString(tableName, "p_name")
	_sysOrgnization.PKey = field.NewString(tableName, "p_key")
	_sysOrgnization.Path = field.NewString(tableName, "path")

	_sysOrgnization.fillFieldMap()

	return _sysOrgnization
}

type sysOrgnization struct {
	sysOrgnizationDo

	ALL           field.Field
	ID            field.Int32
	Name          field.String
	Pid           field.Int32
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	ContactName   field.String
	ContactPhone  field.String
	ContactAddres field.String
	Ext1          field.String
	Ext2          field.String
	Ext3          field.String
	Ext4          field.String
	Ext5          field.String
	Ext6          field.String
	Ext7          field.String
	Ext8          field.String
	Ext9          field.String
	Ext10         field.String
	PName         field.String
	PKey          field.String
	Path          field.String

	fieldMap map[string]field.Expr
}

func (s sysOrgnization) Table(newTableName string) *sysOrgnization {
	s.sysOrgnizationDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysOrgnization) As(alias string) *sysOrgnization {
	s.sysOrgnizationDo.DO = *(s.sysOrgnizationDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysOrgnization) updateTableName(table string) *sysOrgnization {
	s.ALL = field.NewField(table, "*")
	s.ID = field.NewInt32(table, "id")
	s.Name = field.NewString(table, "name")
	s.Pid = field.NewInt32(table, "pid")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.ContactName = field.NewString(table, "contact_name")
	s.ContactPhone = field.NewString(table, "contact_phone")
	s.ContactAddres = field.NewString(table, "contact_addres")
	s.Ext1 = field.NewString(table, "ext1")
	s.Ext2 = field.NewString(table, "ext2")
	s.Ext3 = field.NewString(table, "ext3")
	s.Ext4 = field.NewString(table, "ext4")
	s.Ext5 = field.NewString(table, "ext5")
	s.Ext6 = field.NewString(table, "ext6")
	s.Ext7 = field.NewString(table, "ext7")
	s.Ext8 = field.NewString(table, "ext8")
	s.Ext9 = field.NewString(table, "ext9")
	s.Ext10 = field.NewString(table, "ext10")
	s.PName = field.NewString(table, "p_name")
	s.PKey = field.NewString(table, "p_key")
	s.Path = field.NewString(table, "path")

	s.fillFieldMap()

	return s
}

func (s *sysOrgnization) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysOrgnization) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 22)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["pid"] = s.Pid
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["contact_name"] = s.ContactName
	s.fieldMap["contact_phone"] = s.ContactPhone
	s.fieldMap["contact_addres"] = s.ContactAddres
	s.fieldMap["ext1"] = s.Ext1
	s.fieldMap["ext2"] = s.Ext2
	s.fieldMap["ext3"] = s.Ext3
	s.fieldMap["ext4"] = s.Ext4
	s.fieldMap["ext5"] = s.Ext5
	s.fieldMap["ext6"] = s.Ext6
	s.fieldMap["ext7"] = s.Ext7
	s.fieldMap["ext8"] = s.Ext8
	s.fieldMap["ext9"] = s.Ext9
	s.fieldMap["ext10"] = s.Ext10
	s.fieldMap["p_name"] = s.PName
	s.fieldMap["p_key"] = s.PKey
	s.fieldMap["path"] = s.Path
}

func (s sysOrgnization) clone(db *gorm.DB) sysOrgnization {
	s.sysOrgnizationDo.ReplaceDB(db)
	return s
}

type sysOrgnizationDo struct{ gen.DO }

func (s sysOrgnizationDo) Debug() *sysOrgnizationDo {
	return s.withDO(s.DO.Debug())
}

func (s sysOrgnizationDo) WithContext(ctx context.Context) *sysOrgnizationDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysOrgnizationDo) Clauses(conds ...clause.Expression) *sysOrgnizationDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysOrgnizationDo) Returning(value interface{}, columns ...string) *sysOrgnizationDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysOrgnizationDo) Not(conds ...gen.Condition) *sysOrgnizationDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysOrgnizationDo) Or(conds ...gen.Condition) *sysOrgnizationDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysOrgnizationDo) Select(conds ...field.Expr) *sysOrgnizationDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysOrgnizationDo) Where(conds ...gen.Condition) *sysOrgnizationDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysOrgnizationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *sysOrgnizationDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s sysOrgnizationDo) Order(conds ...field.Expr) *sysOrgnizationDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysOrgnizationDo) Distinct(cols ...field.Expr) *sysOrgnizationDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysOrgnizationDo) Omit(cols ...field.Expr) *sysOrgnizationDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysOrgnizationDo) Join(table schema.Tabler, on ...field.Expr) *sysOrgnizationDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysOrgnizationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *sysOrgnizationDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysOrgnizationDo) RightJoin(table schema.Tabler, on ...field.Expr) *sysOrgnizationDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysOrgnizationDo) Group(cols ...field.Expr) *sysOrgnizationDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysOrgnizationDo) Having(conds ...gen.Condition) *sysOrgnizationDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysOrgnizationDo) Limit(limit int) *sysOrgnizationDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysOrgnizationDo) Offset(offset int) *sysOrgnizationDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysOrgnizationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *sysOrgnizationDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysOrgnizationDo) Unscoped() *sysOrgnizationDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysOrgnizationDo) Create(values ...*model.SysOrgnization) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysOrgnizationDo) CreateInBatches(values []*model.SysOrgnization, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysOrgnizationDo) Save(values ...*model.SysOrgnization) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysOrgnizationDo) First() (*model.SysOrgnization, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysOrgnization), nil
	}
}

func (s sysOrgnizationDo) Take() (*model.SysOrgnization, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysOrgnization), nil
	}
}

func (s sysOrgnizationDo) Last() (*model.SysOrgnization, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysOrgnization), nil
	}
}

func (s sysOrgnizationDo) Find() ([]*model.SysOrgnization, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysOrgnization), err
}

func (s sysOrgnizationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysOrgnization, err error) {
	buf := make([]*model.SysOrgnization, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysOrgnizationDo) FindInBatches(result *[]*model.SysOrgnization, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysOrgnizationDo) Attrs(attrs ...field.AssignExpr) *sysOrgnizationDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysOrgnizationDo) Assign(attrs ...field.AssignExpr) *sysOrgnizationDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysOrgnizationDo) Joins(field field.RelationField) *sysOrgnizationDo {
	return s.withDO(s.DO.Joins(field))
}

func (s sysOrgnizationDo) Preload(field field.RelationField) *sysOrgnizationDo {
	return s.withDO(s.DO.Preload(field))
}

func (s sysOrgnizationDo) FirstOrInit() (*model.SysOrgnization, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysOrgnization), nil
	}
}

func (s sysOrgnizationDo) FirstOrCreate() (*model.SysOrgnization, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysOrgnization), nil
	}
}

func (s sysOrgnizationDo) FindByPage(offset int, limit int) (result []*model.SysOrgnization, count int64, err error) {
	if limit <= 0 {
		count, err = s.Count()
		return
	}

	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysOrgnizationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s *sysOrgnizationDo) withDO(do gen.Dao) *sysOrgnizationDo {
	s.DO = *do.(*gen.DO)
	return s
}

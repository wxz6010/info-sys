// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"com.alex.infosys/app/dal/model"
	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newPeasentPlant(db *gorm.DB) peasentPlant {
	_peasentPlant := peasentPlant{}

	_peasentPlant.peasentPlantDo.UseDB(db)
	_peasentPlant.peasentPlantDo.UseModel(&model.PeasentPlant{})

	tableName := _peasentPlant.peasentPlantDo.TableName()
	_peasentPlant.ALL = field.NewField(tableName, "*")
	_peasentPlant.ID = field.NewInt32(tableName, "id")
	_peasentPlant.Area = field.NewFloat64(tableName, "area")
	_peasentPlant.PlantType = field.NewString(tableName, "plant_type")
	_peasentPlant.PeasentID = field.NewInt32(tableName, "peasent_id")
	_peasentPlant.CreateAt = field.NewTime(tableName, "create_at")
	_peasentPlant.UpdateAt = field.NewTime(tableName, "update_at")
	_peasentPlant.DeletedAt = field.NewField(tableName, "deleted_at")

	_peasentPlant.fillFieldMap()

	return _peasentPlant
}

type peasentPlant struct {
	peasentPlantDo

	ALL       field.Field
	ID        field.Int32
	Area      field.Float64
	PlantType field.String
	PeasentID field.Int32
	CreateAt  field.Time
	UpdateAt  field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (p peasentPlant) Table(newTableName string) *peasentPlant {
	p.peasentPlantDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p peasentPlant) As(alias string) *peasentPlant {
	p.peasentPlantDo.DO = *(p.peasentPlantDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *peasentPlant) updateTableName(table string) *peasentPlant {
	p.ALL = field.NewField(table, "*")
	p.ID = field.NewInt32(table, "id")
	p.Area = field.NewFloat64(table, "area")
	p.PlantType = field.NewString(table, "plant_type")
	p.PeasentID = field.NewInt32(table, "peasent_id")
	p.CreateAt = field.NewTime(table, "create_at")
	p.UpdateAt = field.NewTime(table, "update_at")
	p.DeletedAt = field.NewField(table, "deleted_at")

	p.fillFieldMap()

	return p
}

func (p *peasentPlant) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *peasentPlant) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 7)
	p.fieldMap["id"] = p.ID
	p.fieldMap["area"] = p.Area
	p.fieldMap["plant_type"] = p.PlantType
	p.fieldMap["peasent_id"] = p.PeasentID
	p.fieldMap["create_at"] = p.CreateAt
	p.fieldMap["update_at"] = p.UpdateAt
	p.fieldMap["deleted_at"] = p.DeletedAt
}

func (p peasentPlant) clone(db *gorm.DB) peasentPlant {
	p.peasentPlantDo.ReplaceDB(db)
	return p
}

type peasentPlantDo struct{ gen.DO }

func (p peasentPlantDo) Debug() *peasentPlantDo {
	return p.withDO(p.DO.Debug())
}

func (p peasentPlantDo) WithContext(ctx context.Context) *peasentPlantDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p peasentPlantDo) Clauses(conds ...clause.Expression) *peasentPlantDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p peasentPlantDo) Returning(value interface{}, columns ...string) *peasentPlantDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p peasentPlantDo) Not(conds ...gen.Condition) *peasentPlantDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p peasentPlantDo) Or(conds ...gen.Condition) *peasentPlantDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p peasentPlantDo) Select(conds ...field.Expr) *peasentPlantDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p peasentPlantDo) Where(conds ...gen.Condition) *peasentPlantDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p peasentPlantDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *peasentPlantDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p peasentPlantDo) Order(conds ...field.Expr) *peasentPlantDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p peasentPlantDo) Distinct(cols ...field.Expr) *peasentPlantDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p peasentPlantDo) Omit(cols ...field.Expr) *peasentPlantDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p peasentPlantDo) Join(table schema.Tabler, on ...field.Expr) *peasentPlantDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p peasentPlantDo) LeftJoin(table schema.Tabler, on ...field.Expr) *peasentPlantDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p peasentPlantDo) RightJoin(table schema.Tabler, on ...field.Expr) *peasentPlantDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p peasentPlantDo) Group(cols ...field.Expr) *peasentPlantDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p peasentPlantDo) Having(conds ...gen.Condition) *peasentPlantDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p peasentPlantDo) Limit(limit int) *peasentPlantDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p peasentPlantDo) Offset(offset int) *peasentPlantDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p peasentPlantDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *peasentPlantDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p peasentPlantDo) Unscoped() *peasentPlantDo {
	return p.withDO(p.DO.Unscoped())
}

func (p peasentPlantDo) Create(values ...*model.PeasentPlant) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p peasentPlantDo) CreateInBatches(values []*model.PeasentPlant, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p peasentPlantDo) Save(values ...*model.PeasentPlant) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p peasentPlantDo) First() (*model.PeasentPlant, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.PeasentPlant), nil
	}
}

func (p peasentPlantDo) Take() (*model.PeasentPlant, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.PeasentPlant), nil
	}
}

func (p peasentPlantDo) Last() (*model.PeasentPlant, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.PeasentPlant), nil
	}
}

func (p peasentPlantDo) Find() ([]*model.PeasentPlant, error) {
	result, err := p.DO.Find()
	return result.([]*model.PeasentPlant), err
}

func (p peasentPlantDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.PeasentPlant, err error) {
	buf := make([]*model.PeasentPlant, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p peasentPlantDo) FindInBatches(result *[]*model.PeasentPlant, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p peasentPlantDo) Attrs(attrs ...field.AssignExpr) *peasentPlantDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p peasentPlantDo) Assign(attrs ...field.AssignExpr) *peasentPlantDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p peasentPlantDo) Joins(field field.RelationField) *peasentPlantDo {
	return p.withDO(p.DO.Joins(field))
}

func (p peasentPlantDo) Preload(field field.RelationField) *peasentPlantDo {
	return p.withDO(p.DO.Preload(field))
}

func (p peasentPlantDo) FirstOrInit() (*model.PeasentPlant, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.PeasentPlant), nil
	}
}

func (p peasentPlantDo) FirstOrCreate() (*model.PeasentPlant, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.PeasentPlant), nil
	}
}

func (p peasentPlantDo) FindByPage(offset int, limit int) (result []*model.PeasentPlant, count int64, err error) {
	if limit <= 0 {
		count, err = p.Count()
		return
	}

	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p peasentPlantDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p *peasentPlantDo) withDO(do gen.Dao) *peasentPlantDo {
	p.DO = *do.(*gen.DO)
	return p
}

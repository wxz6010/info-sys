// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

func Use(db *gorm.DB) *Query {
	return &Query{
		db:              db,
		OrgnizationType: newOrgnizationType(db),
		PeasantDatum:    newPeasantDatum(db),
		PeasentPlant:    newPeasentPlant(db),
		SysDictionary:   newSysDictionary(db),
		SysOrgnization:  newSysOrgnization(db),
		SysRole:         newSysRole(db),
		SysUser:         newSysUser(db),
	}
}

type Query struct {
	db *gorm.DB

	OrgnizationType orgnizationType
	PeasantDatum    peasantDatum
	PeasentPlant    peasentPlant
	SysDictionary   sysDictionary
	SysOrgnization  sysOrgnization
	SysRole         sysRole
	SysUser         sysUser
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:              db,
		OrgnizationType: q.OrgnizationType.clone(db),
		PeasantDatum:    q.PeasantDatum.clone(db),
		PeasentPlant:    q.PeasentPlant.clone(db),
		SysDictionary:   q.SysDictionary.clone(db),
		SysOrgnization:  q.SysOrgnization.clone(db),
		SysRole:         q.SysRole.clone(db),
		SysUser:         q.SysUser.clone(db),
	}
}

type queryCtx struct {
	OrgnizationType orgnizationTypeDo
	PeasantDatum    peasantDatumDo
	PeasentPlant    peasentPlantDo
	SysDictionary   sysDictionaryDo
	SysOrgnization  sysOrgnizationDo
	SysRole         sysRoleDo
	SysUser         sysUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		OrgnizationType: *q.OrgnizationType.WithContext(ctx),
		PeasantDatum:    *q.PeasantDatum.WithContext(ctx),
		PeasentPlant:    *q.PeasentPlant.WithContext(ctx),
		SysDictionary:   *q.SysDictionary.WithContext(ctx),
		SysOrgnization:  *q.SysOrgnization.WithContext(ctx),
		SysRole:         *q.SysRole.WithContext(ctx),
		SysUser:         *q.SysUser.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
